{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dmitry\\\\Documents\\\\GitHub\\\\Pandela-Frontend\\\\src\\\\pages\\\\register.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CardInput from \"../components/CardInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    username: '',\n    email: '',\n    password: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\"https://pandela-youtube.onrender.com/api/profiles/setup/<str:pk>/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log(\"DATA:\", data);\n    } catch (error) {\n      console.error('There was a problem with the fetch operation:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(CardInput, {\n        inputsData: [{\n          title: \"Your name\",\n          type: \"text\",\n          name: \"name\"\n        }, {\n          title: \"Choose a username\",\n          type: \"text\",\n          name: \"username\"\n        }, {\n          title: \"Your email\",\n          type: \"email\",\n          name: \"email\"\n        }, {\n          title: \"Choose a password\",\n          type: \"password\",\n          name: \"password\"\n        }],\n        formTitle: \"Registration\",\n        buttonText: \"Register\",\n        linkText: \"Already registered? Log in\",\n        to: \"/login\",\n        function: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .register-form {\n          max-width: 300px;\n          margin: 0 auto;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"txvpeWMXrqNxhKPxwQv4jw79ZD8=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","CardInput","jsxDEV","_jsxDEV","Register","_s","formData","setFormData","name","username","email","password","handleChange","e","value","target","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","error","className","children","onSubmit","inputsData","title","type","formTitle","buttonText","linkText","to","function","fileName","_jsxFileName","lineNumber","columnNumber","jsx","_c","$RefreshReg$"],"sources":["C:/Users/Dmitry/Documents/GitHub/Pandela-Frontend/src/pages/register.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport CardInput from \"../components/CardInput\";\r\n\r\ninterface User {\r\n  name: string;\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst Register: React.FC = () => {\r\n  const [formData, setFormData] = useState<User>({\r\n    name: '',\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch(\"https://pandela-youtube.onrender.com/api/profiles/setup/<str:pk>/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log(\"DATA:\", data);\r\n    } catch (error) {\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"register-form\">\r\n      <form onSubmit={handleSubmit}>\r\n        <CardInput\r\n          inputsData={[\r\n            { title: \"Your name\", type: \"text\", name: \"name\" },\r\n            { title: \"Choose a username\", type: \"text\", name: \"username\" },\r\n            { title: \"Your email\", type: \"email\", name: \"email\" },\r\n            { title: \"Choose a password\", type: \"password\", name: \"password\" },\r\n          ]}\r\n          formTitle=\"Registration\"\r\n          buttonText=\"Register\"\r\n          linkText=\"Already registered? Log in\"\r\n          to=\"/login\"\r\n          function={handleSubmit}\r\n        />\r\n      </form>\r\n      <style jsx>{`\r\n        .register-form {\r\n          max-width: 300px;\r\n          margin: 0 auto;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAShD,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAO;IAC7CQ,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAIC,CAAsC,IAAK;IAC/D,MAAM;MAAEL,IAAI;MAAEM;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAChCR,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAE,CAACE,IAAI,GAAGM;IAAM,CAAC,CAAC;EAC7C,CAAC;EAED,MAAME,YAAY,GAAG,MAAOH,CAAmC,IAAK;IAClEA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mEAAmE,EAAE;QAChGC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAClB,QAAQ;MAC/B,CAAC,CAAC;MACF,IAAI,CAACY,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACvE;EACF,CAAC;EAED,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B9B,OAAA;MAAM+B,QAAQ,EAAElB,YAAa;MAAAiB,QAAA,eAC3B9B,OAAA,CAACF,SAAS;QACRkC,UAAU,EAAE,CACV;UAAEC,KAAK,EAAE,WAAW;UAAEC,IAAI,EAAE,MAAM;UAAE7B,IAAI,EAAE;QAAO,CAAC,EAClD;UAAE4B,KAAK,EAAE,mBAAmB;UAAEC,IAAI,EAAE,MAAM;UAAE7B,IAAI,EAAE;QAAW,CAAC,EAC9D;UAAE4B,KAAK,EAAE,YAAY;UAAEC,IAAI,EAAE,OAAO;UAAE7B,IAAI,EAAE;QAAQ,CAAC,EACrD;UAAE4B,KAAK,EAAE,mBAAmB;UAAEC,IAAI,EAAE,UAAU;UAAE7B,IAAI,EAAE;QAAW,CAAC,CAClE;QACF8B,SAAS,EAAC,cAAc;QACxBC,UAAU,EAAC,UAAU;QACrBC,QAAQ,EAAC,4BAA4B;QACrCC,EAAE,EAAC,QAAQ;QACXC,QAAQ,EAAE1B;MAAa;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACP3C,OAAA;MAAO4C,GAAG;MAAAd,QAAA,EAAG;AACnB;AACA;AACA;AACA;AACA;IAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACzC,EAAA,CA1DID,QAAkB;AAAA4C,EAAA,GAAlB5C,QAAkB;AA4DxB,eAAeA,QAAQ;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}